s7c7gp04c,     # Persona C: número horas o minutos al día le trabajó
s7c7gp04d,     # Persona D: número horas o minutos al día le trabajó
s7c7gp04e      # Persona E: número horas o minutos al día le trabajó
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "num_hours_or_min") %>%
mutate(member = cleanKey(householdMember,9,9)) %>%
mutate_at(vars("cons","edo","mun","loc","s7c7gp01", "householdMember","member"), funs(as.character))
# codigo horas y minutos
ganaderia_household_labor_code_time  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp04_ca,   # Persona A: código horas (1) o minutos (2)
s7c7gp04_cb,   # Persona B: código horas (1) o minutos (2)
s7c7gp04_cc,   # Persona C: código horas (1) o minutos (2)
s7c7gp04_cd,   # Persona D: código horas (1) o minutos (2)
s7c7gp04_ce   # Persona E: código horas (1) o minutos (2)
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "code_hours_or_min") %>%
mutate(member = cleanKey(householdMember,11,11))  %>%
mutate_all(funs(as.character))
# número de días a la semana
ganaderia_household_labor_code_days  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp05a,     # Persona A: número de días a la semana
s7c7gp05b,     # Persona B: número de días a la semana
s7c7gp05c,     # Persona C: número de días a la semana
s7c7gp05d,     # Persona D: número de días a la semana
s7c7gp05e     # Persona E: número de días a la semana
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "days") %>%
mutate(member = cleanKey(householdMember,9,9)) %>%
mutate_at(vars("cons","edo","mun","loc","s7c7gp01", "householdMember", "member"),funs(as.character))
# número de días al mes
ganaderia_household_labor_code_months  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp06a,     # Persona A: número de meses
s7c7gp06b,     # Persona B: número de meses
s7c7gp06c,     # Persona C: número de meses
s7c7gp06d,     # Persona D: número de meses
s7c7gp06e      # Persona E: número de meses
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "months") %>%
mutate(member = cleanKey(householdMember,9,9)) %>%
mutate_at(vars("cons","edo","mun","loc", "s7c7gp01", "householdMember", "member"),funs(as.character))
# Joins para formar una sola tabla de labor a partir de las cuatro tablas extraídas.
ganaderia_household_labor <- left_join(ganaderia_household_labor_time, ganaderia_household_labor_code_time,
by = c("cons"= "cons", "s7c7gp01" = "s7c7gp01", "member" = "member"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, ganaderia_household_labor_code_days,
by = c("cons"= "cons", "s7c7gp01" = "s7c7gp01", "member" = "member"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, ganaderia_household_labor_code_months,
by = c("cons"= "cons", "s7c7gp01" = "s7c7gp01", "member" = "member"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, cat_gpo_animal, by = c("s7c7gp01" ="COD_GPO"))
# Extracción de campos relevantes
ganaderia_household_labor <-  select(ganaderia_household_labor,
cons,
edo.x,           # clave estado
mun.x,           # clave municipio
loc.x,           # clave localidad
s7c7gp01,
NOMBRE_GRUPO,
member,
num_hours_or_min,
code_hours_or_min,
days,
months) %>%
arrange(cons, s7c7gp01, member)
# Función para construir un solo campo de tiempo en horas día
calcularHora  <- function(tiempo, codigoTiempo){
ifelse(codigoTiempo == 1, tiempo,
ifelse(codigoTiempo == 2, tiempo/60,
ifelse(is.na(tiempo), 0,
ifelse(is.nan(tiempo), 0, 0))))
}
# Cálculo de horas a la semana, mes y año, así como renombre de campos
ganaderia_household_labor <- ganaderia_household_labor %>%
mutate(
horasDia = calcularHora(num_hours_or_min, code_hours_or_min),
horasSemana = horasDia * days,
horasMes = horasSemana * 4,
horasAno = horasMes * months,
cons = sprintf("%04d", as.numeric(cons)),
edo.x = sprintf("%02d", as.numeric(edo.x)),
mun.x = sprintf("%03d", as.numeric(mun.x)),
loc.x = sprintf("%04d", as.numeric(loc.x))
) %>%
rename(
cve_edo = edo.x,
cve_mun = mun.x,
cve_loc = loc.x,
grupo_animal = NOMBRE_GRUPO,
miembro_hogar = member
)
# Joins de catalogos estado y municipio
ganaderia_household_labor <- left_join(ganaderia_household_labor,cat_estado, by = c("cve_edo" = "CVE_ENT"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, cat_municipio, by = c("cve_edo" = "CVE_ENT", "cve_mun" = "CVE_MUN"))
head(ganaderia_household_labor,10)
# Agregación de la tabla trabajo para dar formato final.
labor <- ganaderia_household_labor %>%
group_by(cons, cve_edo, NOM_ENT, cve_mun, NOM_MUN, cve_loc, grupo_animal) %>%
summarise(horas_anuales = sum(horasAno, na.rm = TRUE)) %>%
arrange(grupo_animal)
# Guardar tabla final
guardarTablaProcesada(labor)
# Mostrar primeros 10 renglones de la tabla final
head(labor, 10)
# Número de filas
nrow(labor)
# Cuadro resumen
labor %>% group_by(grupo_animal) %>% summarise(horas_anuales = sum(horas_anuales)) %>% arrange(desc(horas_anuales))
# Función que permite calcular el pago anual del total de hombres contratados
calcularPagoTrabajoContratado <- function(trabajadores, pago, meses, frecuencia){
# caso semana
ifelse(frecuencia == 1, trabajadores * pago * 4 * meses,
# caso mes
ifelse(frecuencia == 2, trabajadores * pago  * meses,
# total
ifelse(frecuencia == 3, trabajadores * pago,
# NA
ifelse(is.na(frecuencia), 0, 0))))
}
# Pipiline que extrae hombres contrtados en el sector de la ganadería por el hogar y calculo del pago anual
# Solo se aplicó a los hombres porque mujeres no había.
ganaderia_trabajo_contratado  <- prod_ganade_ta %>%
filter(s7c7gp07 == 1) %>%
select(cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp07,      # Hubo mano de obra contratada por tipo de animal sí (1) no (2)
s7c7gp08,      # num de hombres contratados // numeric
s7c7gp09,      # dinero en pesos pagado por hombre  // numeric
s7c7gp09_c,    # por semana (1), mes (2) o total (3)
s7c7gp10,      # num de meses // numeric
s7c7gp11,      # num de mujeres contratados
s7c7gp12,      # dinero en pesos pagado por mjer
s7c7gp12_c,    # por semana (1), mes (2) o total (3)
s7c7gp13      # num de meses
) %>%
mutate(
cons = sprintf("%04d", as.numeric(cons)),
edo  = sprintf("%02d", as.numeric(edo)),
mun  = sprintf("%03d", as.numeric(mun)),
loc  = sprintf("%04d", as.numeric(loc))
) %>%
mutate_at(vars("s7c7gp01", "s7c7gp07", "s7c7gp09_c", "s7c7gp12_c"),funs(as.character)) %>%
mutate( pagoAnual = calcularPagoTrabajoContratado(
s7c7gp08, #trabajadores
s7c7gp09, #pago
s7c7gp10, #meses
s7c7gp09_c)) #frecuencia
#Guardar la tabla de factores de producción de la ganadería en la carpeta Bases_Hogares_Procesadas
guardarTablaProcesada(ganaderia_trabajo_contratado)
# Agregación de la tabla trabajo para dar formato final.
hired_labor <- ganaderia_trabajo_contratado %>%
group_by(cons, edo, mun, loc, s7c7gp01) %>%
summarise(pago_anual = sum(pagoAnual, na.rm = TRUE)) %>%
arrange(s7c7gp01)
hired_labor <- left_join(hired_labor,cat_estado, by = c("edo" = "CVE_ENT"))
hired_labor <- left_join(hired_labor,cat_municipio, by = c("edo" = "CVE_ENT", "mun" = "CVE_MUN"))
hired_labor <- hired_labor %>%
select(cons, edo, NOM_ENT, mun, NOM_MUN, loc, s7c7gp01, pago_anual) %>%
rename(cve_edo = edo,
cve_mun = mun,
cve_loc = loc,
cve_animal = s7c7gp01)
# Guardar tabla final
guardarTablaProcesada(hired_labor)
# Mostrar primeros 10 renglones de la tabla final
head(hired_labor, 10)
hired_labor %>% group_by(cve_animal) %>% summarise(pago_anual = sum(pago_anual)) %>% arrange(desc(pago_anual))
knitr::opts_chunk$set(echo = TRUE)
# Para instalar las liberías borrar el símbolo de # en las siguientes tres filas. Re introducir el símbolo # una vez instaladas.
# install.packages("haven")
# install.packages("dplyr")
# install.packages("haven")
# install.packages("tidyverse")
# Cargar las librerías en el espacio de trabajo
library(haven) # Librería para que R pueda leer bases de datos en STATA
library(dplyr)   # Librería con un sintaxis especial para manipular tablas (data frames)
library(tidyr)   # Librería con funciones para limpiar y estructurar tablas (data frames)
library(tidyverse)
procesarSTATA <- function(nombreArchivo, ...){
# Area de oportunidad. Ver como en windows se puede abreviar el working directory para no tener que escribir toda la ruta.
inputStataDirectory <- "Base de Hogares_DTA/"
tablaSTATA = read_dta(paste(inputStataDirectory,nombreArchivo,".dta", sep = "", ...))
outputCSVDirectory <- "Bases_Hogares_CSV/"
write.csv(tablaSTATA, file = paste(outputCSVDirectory,nombreArchivo,".csv", sep = ""), row.names=FALSE)
return(tablaSTATA)
}
guardarTablaProcesada <- function(tabla){
nombreArchivo <- deparse(substitute(tabla))
outputTablasProcesadas <- "Bases_Hogares_Procesadas/"
write.csv(tabla, file = paste(outputTablasProcesadas,nombreArchivo,".csv", sep = ""), row.names=FALSE)
}
inputCatGpoAnimal <- "Catalogos/catalogo_grupo_animal.csv"
cat_gpo_animal <- read_csv(inputCatGpoAnimal,
col_types = cols( COD_GPO = col_character(),
NOMBRE_GRUPO = col_character()
))
inputCatAnimal <- "Catalogos/catalogo_animales.csv"
cat_animal <- read_csv(inputCatAnimal, col_types = cols( COD_ANIMAL = col_character(),
NOMBRE_ANIMAL = col_character()
))
inputCatEstado <- "Catalogos/catalogo_estado.csv"
cat_estado <- read.csv(inputCatEstado) %>%
mutate(CVE_ENT = sprintf("%02d", CVE_ENT))
inputCatMunicipio <- "Catalogos/catalogo_municipio.csv"
cat_municipio <- read.csv(inputCatMunicipio) %>%
mutate(
CVE_ENT = sprintf("%02d", CVE_ENT),
CVE_MUN = sprintf("%03d", CVE_MUN)
)
# Cargar base de datos en formato STATA a R y guardar base de datos en formato CSV.
prod_ganade_a <- procesarSTATA("Produccion_ganade_a")
# Desplegar el nombre de los campos
names(prod_ganade_a)
# Número de filas
nrow(prod_ganade_a)
# Crear tabla ganaderia_produccion
ganaderia_produccion  <- prod_ganade_a %>%
select(cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
grupo,         # clave grupo
s7c7dp01,      # clave animal
s7c7dp02,      # num animales vendidos en el periodo (0 si no vendieron)
s7c7dp03a,     # precio de venta
s7c7dp03b,     # 01 venta por cabeza o 02 venta total
s7c7dp05,      # vendió dentro/fuera localidad
s7c7dp09_edo,  # clave estado de mpio y localidad
s7c7dp08_mc,   # clave municipio de la localidad
s7c7dp07_lc,   # clave localidad
s7c7dp11       # gasto en transporte para venta animales
) %>%
mutate_at(vars("cons","edo","mun", "loc", "grupo","s7c7dp01","s7c7dp03b", "s7c7dp05",
"s7c7dp07_lc", "s7c7dp09_edo", "s7c7dp08_mc"), funs(as.character)) %>%
mutate_at(vars("s7c7dp02", "s7c7dp03a","s7c7dp11"), funs(as.numeric)) %>%
mutate(cons = sprintf("%04d", as.numeric(cons)),
edo = sprintf("%02d", as.numeric(edo)),
mun = sprintf("%03d", as.numeric(mun)),
loc = sprintf("%04d", as.numeric(loc)))
# Para ajustar el formato hay que quitar NAs
#mutate(edo_venta = sprintf("%02d", as.numeric(s7c7dp09_edo))) %>%
#mutate(mun_venta = sprintf("%03d", as.numeric(s7c7dp08_mc))) %>%
#mutate(loc_venta = sprintf("%04d", as.numeric(s7c7dp07_lc)))
# Hacer el join de catálogos
ganaderia_produccion <- left_join(ganaderia_produccion, cat_estado, by = c("edo" = "CVE_ENT"))
ganaderia_produccion <- left_join(ganaderia_produccion, cat_municipio, by = c("edo" = "CVE_ENT", "mun" = "CVE_MUN"))
ganaderia_produccion <- left_join(ganaderia_produccion, cat_gpo_animal, by = c("grupo" = "COD_GPO"))
ganaderia_produccion <- left_join(ganaderia_produccion, cat_animal, by = c("s7c7dp01" = "COD_ANIMAL"))
# Mostar vista previa
head(ganaderia_produccion)
# Esta función calcula el monto total
calcularMontoVentaTotal <- function(precioVenta, cantidadVenta, unidadDeVenta){
ifelse(unidadDeVenta == 1, precioVenta * cantidadVenta,
ifelse(unidadDeVenta == 2, precioVenta,
ifelse(is.na(unidadDeVenta),0,0)))
}
# Calculo de la venta total
ganaderia_produccion <- ganaderia_produccion %>%
mutate(montoVentaTotal = calcularMontoVentaTotal(
s7c7dp03a,  # monto de venta (puede ser precio o monto total)
s7c7dp02,  # num animales vendidos en el periodo
s7c7dp03b) # 01 venta por cabeza o 02 venta total
)
# Mostrar vista previa
head(ganaderia_produccion)
valorProduccionGanadera <- ganaderia_produccion %>%
group_by(cons, edo, NOM_ENT, mun, NOM_MUN, grupo, NOMBRE_GRUPO) %>%
# cantidad
summarise(monto_venta = sum(as.numeric(montoVentaTotal), na.rm = TRUE))
animalesVendidos <- ganaderia_produccion %>%
group_by(cons, grupo) %>%
# cantidad
summarise(animales_venta = sum(as.numeric(s7c7dp02), na.rm = TRUE))
ganaderia_produccion <- left_join(valorProduccionGanadera, animalesVendidos, by = c("cons" = "cons", "grupo" = "grupo"))
head(ganaderia_produccion,10)
guardarTablaProcesada(ganaderia_produccion)
# Cargar base de datos en formato STATA a R y guardar base de datos en formato CSV.
prod_ganade_ta <- procesarSTATA("Produccion_ganade_ta")
# Desplegar el nombre de los campos
names(prod_ganade_ta)
# Función para extraer el campo de miembro del hogar
cleanKey <- function(key, start, end){
substring(key,start,end)
}
# horas y minutos
ganaderia_household_labor_time  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp04a,     # Persona A: número horas o minutos al día le trabajó
s7c7gp04b,     # Persona B: número horas o minutos al día le trabajó
s7c7gp04c,     # Persona C: número horas o minutos al día le trabajó
s7c7gp04d,     # Persona D: número horas o minutos al día le trabajó
s7c7gp04e      # Persona E: número horas o minutos al día le trabajó
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "num_hours_or_min") %>%
mutate(member = cleanKey(householdMember,9,9)) %>%
mutate_at(vars("cons","edo","mun","loc","s7c7gp01", "householdMember","member"), funs(as.character))
# codigo horas y minutos
ganaderia_household_labor_code_time  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp04_ca,   # Persona A: código horas (1) o minutos (2)
s7c7gp04_cb,   # Persona B: código horas (1) o minutos (2)
s7c7gp04_cc,   # Persona C: código horas (1) o minutos (2)
s7c7gp04_cd,   # Persona D: código horas (1) o minutos (2)
s7c7gp04_ce   # Persona E: código horas (1) o minutos (2)
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "code_hours_or_min") %>%
mutate(member = cleanKey(householdMember,11,11))  %>%
mutate_all(funs(as.character))
# número de días a la semana
ganaderia_household_labor_code_days  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp05a,     # Persona A: número de días a la semana
s7c7gp05b,     # Persona B: número de días a la semana
s7c7gp05c,     # Persona C: número de días a la semana
s7c7gp05d,     # Persona D: número de días a la semana
s7c7gp05e     # Persona E: número de días a la semana
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "days") %>%
mutate(member = cleanKey(householdMember,9,9)) %>%
mutate_at(vars("cons","edo","mun","loc","s7c7gp01", "householdMember", "member"),funs(as.character))
# número de días al mes
ganaderia_household_labor_code_months  <- prod_ganade_ta %>%
filter(s7c7gp02 == 1) %>% # Trabajaron miembros del hogar en ganadería 1 sí / 2 no
select(
cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp06a,     # Persona A: número de meses
s7c7gp06b,     # Persona B: número de meses
s7c7gp06c,     # Persona C: número de meses
s7c7gp06d,     # Persona D: número de meses
s7c7gp06e      # Persona E: número de meses
) %>%
arrange(cons, s7c7gp01) %>%
gather(6:10, key = "householdMember", value = "months") %>%
mutate(member = cleanKey(householdMember,9,9)) %>%
mutate_at(vars("cons","edo","mun","loc", "s7c7gp01", "householdMember", "member"),funs(as.character))
# Joins para formar una sola tabla de labor a partir de las cuatro tablas extraídas.
ganaderia_household_labor <- left_join(ganaderia_household_labor_time, ganaderia_household_labor_code_time,
by = c("cons"= "cons", "s7c7gp01" = "s7c7gp01", "member" = "member"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, ganaderia_household_labor_code_days,
by = c("cons"= "cons", "s7c7gp01" = "s7c7gp01", "member" = "member"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, ganaderia_household_labor_code_months,
by = c("cons"= "cons", "s7c7gp01" = "s7c7gp01", "member" = "member"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, cat_gpo_animal, by = c("s7c7gp01" ="COD_GPO"))
# Extracción de campos relevantes
ganaderia_household_labor <-  select(ganaderia_household_labor,
cons,
edo.x,           # clave estado
mun.x,           # clave municipio
loc.x,           # clave localidad
s7c7gp01,
NOMBRE_GRUPO,
member,
num_hours_or_min,
code_hours_or_min,
days,
months) %>%
arrange(cons, s7c7gp01, member)
# Función para construir un solo campo de tiempo en horas día
calcularHora  <- function(tiempo, codigoTiempo){
ifelse(codigoTiempo == 1, tiempo,
ifelse(codigoTiempo == 2, tiempo/60,
ifelse(is.na(tiempo), 0,
ifelse(is.nan(tiempo), 0, 0))))
}
# Cálculo de horas a la semana, mes y año, así como renombre de campos
ganaderia_household_labor <- ganaderia_household_labor %>%
mutate(
horasDia = calcularHora(num_hours_or_min, code_hours_or_min),
horasSemana = horasDia * days,
horasMes = horasSemana * 4,
horasAno = horasMes * months,
cons = sprintf("%04d", as.numeric(cons)),
edo.x = sprintf("%02d", as.numeric(edo.x)),
mun.x = sprintf("%03d", as.numeric(mun.x)),
loc.x = sprintf("%04d", as.numeric(loc.x))
) %>%
rename(
cve_edo = edo.x,
cve_mun = mun.x,
cve_loc = loc.x,
grupo_animal = NOMBRE_GRUPO,
miembro_hogar = member
)
# Joins de catalogos estado y municipio
ganaderia_household_labor <- left_join(ganaderia_household_labor,cat_estado, by = c("cve_edo" = "CVE_ENT"))
ganaderia_household_labor <- left_join(ganaderia_household_labor, cat_municipio, by = c("cve_edo" = "CVE_ENT", "cve_mun" = "CVE_MUN"))
head(ganaderia_household_labor,10)
# Agregación de la tabla trabajo para dar formato final.
labor <- ganaderia_household_labor %>%
group_by(cons, cve_edo, NOM_ENT, cve_mun, NOM_MUN, cve_loc, grupo_animal) %>%
summarise(horas_anuales = sum(horasAno, na.rm = TRUE)) %>%
arrange(grupo_animal)
# Guardar tabla final
guardarTablaProcesada(labor)
# Mostrar primeros 10 renglones de la tabla final
head(labor, 10)
# Número de filas
nrow(labor)
# Cuadro resumen
labor %>% group_by(grupo_animal) %>% summarise(horas_anuales = sum(horas_anuales)) %>% arrange(desc(horas_anuales))
# Función que permite calcular el pago anual del total de hombres contratados
calcularPagoTrabajoContratado <- function(trabajadores, pago, meses, frecuencia){
# caso semana
ifelse(frecuencia == 1, trabajadores * pago * 4 * meses,
# caso mes
ifelse(frecuencia == 2, trabajadores * pago  * meses,
# total
ifelse(frecuencia == 3, trabajadores * pago,
# NA
ifelse(is.na(frecuencia), 0, 0))))
}
# Pipiline que extrae hombres contrtados en el sector de la ganadería por el hogar y calculo del pago anual
# Solo se aplicó a los hombres porque mujeres no había.
ganaderia_trabajo_contratado  <- prod_ganade_ta %>%
filter(s7c7gp07 == 1) %>%
select(cons,          # número de cuestionario
edo,           # clave estado
mun,           # clave municipio
loc,           # clave localidad
s7c7gp01,      # Grupo animal
s7c7gp07,      # Hubo mano de obra contratada por tipo de animal sí (1) no (2)
s7c7gp08,      # num de hombres contratados // numeric
s7c7gp09,      # dinero en pesos pagado por hombre  // numeric
s7c7gp09_c,    # por semana (1), mes (2) o total (3)
s7c7gp10,      # num de meses // numeric
s7c7gp11,      # num de mujeres contratados
s7c7gp12,      # dinero en pesos pagado por mjer
s7c7gp12_c,    # por semana (1), mes (2) o total (3)
s7c7gp13      # num de meses
) %>%
mutate(
cons = sprintf("%04d", as.numeric(cons)),
edo  = sprintf("%02d", as.numeric(edo)),
mun  = sprintf("%03d", as.numeric(mun)),
loc  = sprintf("%04d", as.numeric(loc))
) %>%
mutate_at(vars("s7c7gp01", "s7c7gp07", "s7c7gp09_c", "s7c7gp12_c"),funs(as.character)) %>%
mutate( pagoAnual = calcularPagoTrabajoContratado(
s7c7gp08, #trabajadores
s7c7gp09, #pago
s7c7gp10, #meses
s7c7gp09_c)) #frecuencia
#Guardar la tabla de factores de producción de la ganadería en la carpeta Bases_Hogares_Procesadas
guardarTablaProcesada(ganaderia_trabajo_contratado)
# Agregación de la tabla trabajo para dar formato final.
hired_labor <- ganaderia_trabajo_contratado %>%
group_by(cons, edo, mun, loc, s7c7gp01) %>%
summarise(pago_anual = sum(pagoAnual, na.rm = TRUE)) %>%
arrange(s7c7gp01)
hired_labor <- left_join(hired_labor,cat_estado, by = c("edo" = "CVE_ENT"))
hired_labor <- left_join(hired_labor,cat_municipio, by = c("edo" = "CVE_ENT", "mun" = "CVE_MUN"))
hired_labor <- hired_labor %>%
select(cons, edo, NOM_ENT, mun, NOM_MUN, loc, s7c7gp01, pago_anual) %>%
rename(cve_edo = edo,
cve_mun = mun,
cve_loc = loc,
cve_animal = s7c7gp01)
# Guardar tabla final
guardarTablaProcesada(hired_labor)
# Mostrar primeros 10 renglones de la tabla final
head(hired_labor, 10)
hired_labor %>% group_by(cve_animal) %>% summarise(pago_anual = sum(pago_anual)) %>% arrange(desc(pago_anual))
